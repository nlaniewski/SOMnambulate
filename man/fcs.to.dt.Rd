% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcs_funcs.R
\name{fcs.to.dt}
\alias{fcs.to.dt}
\title{reads a .fcs file and converts it to \code{data.table}}
\usage{
fcs.to.dt(
  fcs.file.dt,
  channel_alias = NULL,
  use.alias.pattern = FALSE,
  alias.order = FALSE,
  cofactors = NULL
)
}
\arguments{
\item{fcs.file.dt}{a \code{data.table} as returned from \link{get.fcs.file.dt}; \code{fcs.file.dt} can be subset to include only columns-of-interest (a minimally-representative subset would include only 'f.path' and 'sample.id').}

\item{channel_alias}{as returned from \link{get.fcs.channel.alias}}

\item{use.alias.pattern}{Logical; default \code{FALSE}. If \code{TRUE} and \code{channel_alias} is defined, the 'alias' column will be used as a pattern to define the \link[flowCore]{read.FCS} \code{column.pattern} argument.}

\item{alias.order}{Logical. If \code{TRUE}, the \code{data.table} columns will be ordered to match that of the \code{channel_alias} 'alias' column.}

\item{cofactors}{A named numeric vector; named columns will be \link[base]{asinh} transformed with the supplied cofactor (numeric).}
}
\value{
a \code{data.table} of raw, un-transformed numeric expression values with character/factor identifier columns; if \code{cofactors} is defined, the raw expression values will be \link[base]{asinh} transformed.
}
\description{
After reading a .fcs file, the expression matrix is converted to a \code{data.table}; in addition, character and factor columns (meta-data) are appended to the numeric expression values. Once in \code{data.table} form, operations such as transformation and scaling can be done 'in place' and 'by' groupings streamline analyses. The example data size is fractionally small compared to even a single typical .fcs file; with sufficient RAM resources, a \code{data.table} of .fcs data amounting to tens of GBs (many high-parameter (spectral/mass) .fcs files, row-bound) can be held in memory.
}
\examples{
#from the 'get.fcs.file.dt' example:
load(system.file("extdata", "fcs.files.dt_ECHO.Rdata", package = "SOMnambulate"))

#from the 'get.fcs.channel.alias' example:
load(system.file("extdata", "ca_ECHO.Rdata", package = "SOMnambulate"))

#retains original 'detector' names;
#all columns from 'fcs.file.dt'
names(SOMnambulate:::fcs.to.dt(fcs.files.dt_ECHO[1],channel_alias=NULL))

#replaces the original names with the 'alias' from 'channel.alias';
#all columns from 'fcs.file.dt'
names(fcs.to.dt(fcs.files.dt_ECHO[1],channel_alias=ca_ECHO))

#replaces the original names with the 'alias' from 'channel.alias'; drops via pattern
#all columns from 'fcs.file.dt'
names(fcs.to.dt(fcs.files.dt_ECHO[1],channel_alias=ca_ECHO,use.alias.pattern=TRUE))

#replaces the original names with the 'alias' from 'channel.alias'; drops via pattern
#a subset of columns from 'fcs.file.dt'
names(fcs.to.dt(fcs.files.dt_ECHO[1,.(f.path,sample.id,batch,stim.condition,aliquot.seq)],
channel_alias=ca_ECHO,use.alias.pattern=TRUE))

dt<-fcs.to.dt(fcs.files.dt_ECHO[1,.(f.path,sample.id,batch,stim.condition,aliquot.seq)],
channel_alias=ca_ECHO,use.alias.pattern=TRUE)
dt[]

#as a list of individual .fcs files
dts<-sapply(
split(fcs.files.dt_ECHO[,.(f.path,sample.id,batch,stim.condition,aliquot.seq)],by='f.path'),
fcs.to.dt,channel_alias=ca_ECHO,use.alias.pattern=TRUE,simplify=FALSE)
dts[1]


}
